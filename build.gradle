description = "ANTLR4 project template"
apply plugin: 'java'
apply plugin: 'application'
//apply from: file('gradle/idea.gradle')
mainClassName = "InfixToPostfixRunner"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'shadow'

shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

ext.versions = [
        junit: "4.10",
        antlr: "4.1"
]

ext.antlr = [
        //grammarpackage: "org.carpediem",
        antlrSource: 'src/main/antlr',
        destinationDir: "src/generated/java"
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    compile group: "org.antlr", name: "antlr4-runtime", version: versions.antlr
    antlr4 group: "org.antlr", name: "antlr4", version: versions.antlr
    testCompile group: "junit", name: "junit", version: versions.junit
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    testLogging.showStandardStreams = true
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    //def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    def pkg = ""
    //args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", grammars.files].flatten()

}

run {
    if(project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

jar {
    manifest.attributes("Main-Class": mainClassName)
}
