description = "Compiles ANTLR4, generates LaTeX documentation, tests AND builds jar"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
//apply from: file('gradle/idea.gradle')
mainClassName = "InfixRunner"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'shadow'

shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

ext.versions = [
        junit: "4.10",
        antlr: "4.1"
]

ext.antlr = [
        //grammarpackage: "org.carpediem",
        antlrSource: 'src/main/antlr',
        destinationDir: "src/generated/java"
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    compile group: "org.antlr", name: "antlr4-runtime", version: versions.antlr
    antlr4 group: "org.antlr", name: "antlr4", version: versions.antlr
    testCompile group: "junit", name: "junit", version: versions.junit
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    testLogging.showStandardStreams = true
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    //def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    def pkg = ""
    //args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", grammars.files].flatten()

}

run {
    if(project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

jar {
    manifest.attributes("Main-Class": mainClassName)
}


// Modified from solution posted at: http://forums.gradle.org/gradle/topics/gradle_and_latex
import groovy.text.SimpleTemplateEngine
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.jar.Attributes
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.Task
import org.gradle.api.tasks.StopExecutionException
import org.gradle.api.tasks.wrapper.Wrapper
import org.gradle.util.GradleVersion
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.apache.tools.ant.filters.ReplaceTokens
 
apply plugin: 'groovy'
 
 
sourceSets {
  main { resources { srcDir 'src/doc/latex' } }
}
// PROPERTIES
def stagingDirName = 'build/texstaging'
def docsDirName = 'build/docs'
 
task copyDocs << {
  def stagingDir = file(stagingDirName)
  stagingDir.mkdirs()
  copy {
    from('src/doc/latex') { include '**/*.tex','**/*.inc' }
    //filter(ReplaceTokens, tokens: [release: version, docVersion: docVersion])
    into stagingDir
    includeEmptyDirs = false
  }
}
 
task myInitConfig(type:Copy) << {
  def stagingDir = file(stagingDirName)
  stagingDir.mkdirs()
  from('src/doc/latex') { include '**/*.tex' //
  }
  into stagingDir
  includeEmptyDirs = false
}

task copyPdfToDocsFolder << {
  def docDir = file(docsDirName)
  docDir.mkdirs()
  copy {
  from(stagingDirName) { include '**/*.pdf' //
  }
  into docDir
  includeEmptyDirs = false
  }
}
 
task genDocs << {
  myInitConfig.execute()
  cleanLatex(file(stagingDirName))
  copyDocs.execute()
  if (!isLatexInstallled()) {
    throw new StopExecutionException('Latex is not installed. We skip the document!')
  }
  FileTree tree = fileTree(dir: stagingDirName)
  tree.include '**/*.tex'
  tree.each {File file ->
    compileLatex(file)
  }
  copyPdfToDocsFolder.execute()
}
 
boolean isLatexInstallled() {
  boolean ret_val = false;
  try {
    ant.exec(output: 'build/texstaging/findLatexOut', executable: 'pdflatex', dir: projectDir) { arg(line: "-help") }
    ret_val = true
  } catch (Throwable e) {
    e.printStackTrace();
    ret_val = false
  }
  return ret_val
}
 
void cleanLatex(File dir) {
  file(dir.path).mkdirs()
  ant.delete() {
    fileset(dir: dir, includes: "*.aux, *.lg, *.tmp, *.html, *.pdf, *.log, *.dvi, *.css, *.fdb_latexmk, *.idv, *.toc, *.xref, *.4ct, *.4tc, *.out")
  }
}
 
void compileLatex(File fileToProcess) {
  3.times {
    ant.exec(executable: 'pdflatex', dir: fileToProcess.parent, failonerror: true) { arg(value: fileToProcess.name) }
  }
  3.times {
    ant.exec(executable: 'makeindex', dir: fileToProcess.parent, failonerror: true) { arg(value: fileToProcess.name) }
  }
  3.times {
    ant.exec(executable: 'pdflatex', dir: fileToProcess.parent, failonerror: true) { arg(value: fileToProcess.name) }
  }
}

task release(dependsOn: [build, shadowJar, genDocs]) {
}
